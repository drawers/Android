/*
 * Copyright (c) 2024 DuckDuckGo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.duckduckgo.gradle

import dev.langchain4j.data.message.SystemMessage
import dev.langchain4j.data.message.UserMessage
import dev.langchain4j.model.chat.ChatLanguageModel
import org.gradle.api.DefaultTask
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.provider.Property
import org.gradle.api.services.ServiceReference
import org.gradle.api.tasks.InputDirectory
import org.gradle.api.tasks.Internal
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.PathSensitive
import org.gradle.api.tasks.PathSensitivity.RELATIVE
import org.gradle.api.tasks.TaskAction
import java.io.File
import kotlin.LazyThreadSafetyMode.NONE

@Suppress("UnstableApiUsage")
abstract class Ollinta : DefaultTask() {

    @get:ServiceReference("ollama")
    abstract val ollamaBuildService: Property<OllamaBuildService>

    @get:OutputDirectory
    val outputDir: DirectoryProperty = project.objects.directoryProperty()

    @get:InputDirectory
    @PathSensitive(RELATIVE)
    val inputDir: DirectoryProperty = project.objects.directoryProperty()
    override fun getDescription(): String = "Takes a set of data generated by lint and runs it through Ollama"

    @get:Internal
    val model: ChatLanguageModel by lazy(NONE) {
        ollamaBuildService.get().model
    }

    @TaskAction
    fun performAction() {
        inputDir.get().asFileTree.files.forEach {
            println("Processing prompt file ${it.name}")
            val input = it.readLines()
                .drop(2)
                .joinToString("\n")
            println(input)

            val response = model.generate(systemMessage, UserMessage.from(input))
            println(response.content().text())

            val outputFile = File(outputDir.asFile.get(), it.name)
            outputFile.writer().use { writer ->
                writer.appendLine(response.content().text())
            }
            println("Finished writing response file ${it.name}")
        }
    }

    @Internal
    val systemMessage = SystemMessage.from(
        """
            There is a Kotlin project with unit tests. The unit test functions currently have various non-standard names.
            
            We are performing a migration from non-standard names to a new standard.
            
            The new standard for the names is:
            
            `functionUnderTest - state - expected outcome`
            
            Note that to meet the standard, the test names must have the following:
            * They must be in backticks (``)
            * They must have a minimium of two parts separated by a spaced hyphen " - "
            * The "state" is optional - it can be omitted
            * The parts must start with lowercase if possible
            
            I am going to give you the current name of the function and the body of the function with ### (3 hashes) as a separator.   
            You must propose a new name for the function that meets the convention. 
            Your answer MUST only contain the new proposed function name.
            
            Please omit any filler in your answers like "Certainly!"
             
            Here is a sample input and output to help you.             
      
            Example input:
            
            whenTopLevelFeatureDisabledAndDisabledByUserThenCannotAccessAnySubFeatures
            ###
            fun whenTopLevelFeatureDisabledAndDisabledByUserThenCannotAccessAnySubFeatures() = runTest {
                    setupConfig(topLevelFeatureEnabled = false, autofillEnabledByUser = false)
                    assertAllSubFeaturesDisabled()
                }
            ###
            
            Expected output:
            `setUpConfig - top level feature disabled and disabled by user - cannot access sub features`
            
            Why are we choosing this expected output?
            * The name of the function under test is `setUpConfig` so it is the first part
            * "top level feature disabled and disabled by user" describes the state
            * the expected outcome is "all sub features disabled"
            
            Example input:
            
            whenDeleteAllPasswordsConfirmedWithPasswordsSavedThenDoesIssueCommandToShowUndoSnackbar
            ###
            @Test
                fun whenDeleteAllPasswordsConfirmedWithPasswordsSavedThenDoesIssueCommandToShowUndoSnackbar() = runTest {
                    testee.onDeleteAllPasswordsConfirmed()
                    testee.commandsListView.test {
                        awaitItem().verifyHasCommandToAuthenticateMassDeletion()
                        cancelAndIgnoreRemainingEvents()
                    }
                }
            ###

            Expected output:
            `onDeleteAllPasswordsConfirmed - issues command to show undo snackbar`
            
            Example input:
            
            whenGetCredentialsWithLocalIdNotFoundThenReturnNull
            ###
            @Test
                fun whenGetCredentialsWithLocalIdNotFoundThenReturnNull() = runTest {
                    givenLocalCredentials(
                        twitterCredentials,
                        spotifyCredentials,
                    )

                    val credential = credentialsSync.getCredentialWithId(1234)

                    assertNull(credential)
                }
            ###
            
            Expected output:
            `getCredentialWithId - local Id not found - null`
            
            I have given you three examples to follow.
            
            From now on, in this conversation I am going to give you a real incorrect function name and the function body separated by a ###. 
            
            Please answer with the expected output. Please DO NOT embellish the answer with extra information. Please DO NOT add three backticks
            to make a code block. Please ONLY answer with the proposed name of the function.
           """.trimIndent()
    )
}
